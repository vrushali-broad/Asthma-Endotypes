source("https://bioconductor.org/biocLite.R")
biocLite("DEXSeq")
source("https://bioconductor.org/biocLite.R")
biocLite("Rsubread")
browseVignettes("Rsubread")
source("https://bioconductor.org/biocLite.R")
biocLite("rtracklayer")
R -v
source("https://bioconductor.org/biocLite.R")
biocLite("Rsubread")
featureCounts -T 20 -p -B -O --fraction  -a SuperDuper.gff  -f -o Counts/counts.txt *.out.bam
featureCounts
library(Rsubread)
load("/Volumes/ahg_regevdata/projects/trinity/Vrushali/Supertranscripts_results/Trinity_generated_ST/Kallisto/DEXSeq/DEXY.Rdata")
setRepositories(ind=1:2)
install.packages('annovarR')
source("http://bioconductor.org/biocLite.R")#
biocLite("paxtoolsr")
library(paxtoolsr)
library(BoolNet)#
setwd("/Users/vrushali/Documents/BoolNet/data/Paper1/Final\ Results/Paper_Code/Code/RUDRA/Result1-2")
network = loadNetwork('rules.txt')
series = generateTimeSeries(network,350,800,type = "asynchronous",noiseLevel = 0)
write.table(series, "Output_new/sim_0_0_0.txt", sep="\t")
network = loadNetwork('rules.txt')
series = generateTimeSeries(network,350,800,type = "asynchronous",noiseLevel = 0)
write.table(series, "Output_new/sim_1_0_0.txt", sep="\t")
network = loadNetwork('rules.txt')
series = generateTimeSeries(network,350,800,type = "asynchronous",noiseLevel = 0)
write.table(series, "Output_new/sim_1_tmp_1.txt", sep="\t")
network = loadNetwork('rules.txt')
series = generateTimeSeries(network,350,800,type = "asynchronous",noiseLevel = 0)
write.table(series, "Output_new/sim_1_tmp_tmp.txt", sep="\t")
network = loadNetwork('rules.txt')
series = generateTimeSeries(network,350,800,type = "asynchronous",noiseLevel = 0)
network
write.table(series, "Output_new/sim_tmp_tmp_1.txt", sep="\t")
network = loadNetwork('rules.txt')
network
series = generateTimeSeries(network,350,800,type = "asynchronous",noiseLevel = 0)
write.table(series, "Output_new/sim_0_tmp_tmp.txt", sep="\t")
network = loadNetwork('rules.txt')
series = generateTimeSeries(network,350,800,type = "asynchronous",noiseLevel = 0)
network
write.table(series, "Output_new/sim_0_tmp_1.txt", sep="\t")
write.table(series, "Output/sim_0_tmp_1.txt", sep="\t")
